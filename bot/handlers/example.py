#
# import asyncio
# import re
#
# import aiofiles
# import zipfile
# import os
# import random
# import string
# import subprocess
# import time
# from datetime import datetime
#
# from aiogram.types import FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
#
# from aiogram import types, Router, F
# from aiogram.filters import CommandStart, Command, or_f, StateFilter
# from aiogram.fsm.context import FSMContext
# from aiogram.fsm.state import StatesGroup, State
# from aiogram.types import Message
# from aiogram.utils.keyboard import InlineKeyboardBuilder
# from bs4 import BeautifulSoup
# from dotenv import find_dotenv, load_dotenv
# from sqlalchemy.ext.asyncio import AsyncSession
#
#
# import config
# from common.chat_text import get_category_text
# from database.models import User, Purchase, Sms, Country
# from database.orm_query import orm_get_user, orm_add_user, orm_update_user, get_objects_by_name, get_obj_by_name_and_id, \
#     get_balance_by_username, add_balance_by_username, get_cupon_price, delete_cupon, orm_add_object, get_user_purchases, \
#     get_purchase, get_countries_orm, get_services_orm, get_countries_by_multiservice, check_user_balance, \
#     orm_get_user_by_username, get_balance_by_id
# from kbrds.inline import profile_kb, deposite_kb, get_inlineMix_btns, get_shop_btns, get_cryptobot_btns, \
#     shop_kb, get_callback_btns, info_btn_kb, get_sms_btns, get_sms_countries_btns, get_multiservice_btns, \
#     get_multiservice_countries_btns, get_cryptomus_btns
# from kbrds.reply import menu_markup, sms_shop_markup, pokupka_sms_kb
# from services.cryptomus_service import create_invoice, get_invoice_mus, get_rub_course
# from services.lolz_service import check_payment_lolz, get_history
# from services.main_service import get_invoice, invoice_by_id, check_invoice, delete_invoice, pagination, \
#     send_message_via_telegram_api, send_photomessage_via_telegram_api, give_strings, clear_trash, append_to_file, \
#     pagination_dict, \
#     get_avaliables, generate_random_string
#
# from smsactivate.api import SMSActivateAPI
#
# from services.sms_activate_service import pagination_sms, get_countries_by_service, get_sms_number, \
#     get_activation_status, cancel_activation, get_multi_numbers, get_price_with_markup, \
#     get_price_by_service_and_country
#
# load_dotenv(find_dotenv())
#
#
# user_private_router = Router()
#
#
# # ------------------------------MAIN MENU---------------------------------
#
# @user_private_router.message(F.text.startswith('/start'))
# async def start_cmd(message: types.Message, session: AsyncSession):
#     if message.from_user.username == None:
#         username = 'None'
#     else:
#         username = message.from_user.username
#     if message.chat.type == 'private':
#         if not await orm_get_user(session=session, user_id=message.from_user.id):
#             referrer_id = str(message.text[7:])
#             if referrer_id != '':
#                 if referrer_id != str(message.from_user.id):
#                     user = User(
#                         username = username,
#                         user_id = message.from_user.id,
#                         ref_id = int(referrer_id)
#                     )
#                     await message.bot.send_message(chat_id=int(referrer_id), text=f"<b>–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª - @{username}</b>")
#                     await orm_add_user(session, user)
#                 else:
#                     user = User(
#                         username=username,
#                         user_id=message.from_user.id,
#                     )
#                     await orm_add_user(session, user)
#             else:
#                 user = User(
#                     username=username,
#                     user_id=message.from_user.id,
#                 )
#                 await orm_add_user(session, user)
#         await message.answer(f'''<b>üôã‚Äç‚ôÇÔ∏è@{username} –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å
#  –≤ –±–æ—Ç–∞ ùêèùêîùêçùêÇùêáùêåùêÄùêÉùêÑ SHOP!
#
# üëá –î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ</b>
#         ''', reply_markup=menu_markup)
#         # await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=menu_kb.as_markup())
#         await message.delete()
#         return
#
#
# @user_private_router.message(F.text == '‚ÑπÔ∏è–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
# async def menu_query1(message: types.Message, state: FSMContext):
#     await state.clear()
#     await message.answer_photo(photo=FSInputFile('assets/info.png'), reply_markup=info_btn_kb.as_markup())
#     await message.delete()
#     return
#
# @user_private_router.callback_query(F.data == 'rules')
# async def menu_query2(callback: types.CallbackQuery, state: FSMContext):
#     await state.clear()
#     async with aiofiles.open('rules.txt', 'r', encoding='utf-8') as f:
#         info_text = await f.read()
#     await callback.message.answer(f'<b>{info_text}</b>')
#     await callback.message.delete()
#     return
#
#
# @user_private_router.callback_query(F.data == 'referal')
# async def shop_query(call: types.CallbackQuery, state: FSMContext):
#     await state.clear()
#     text = f'''<b>–í –±–æ—Ç–µ –≤–∫–ª—é—á–µ–Ω–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞.
# –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ–º!
# –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å 5% —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—à–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞
#
# üõçÔ∏è–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {'https://t.me/ ' +config.BOT_NAM E +'?start= ' +str(call.from_user.id)}
# </b>
#     '''
#     await call.message.answer(text)
#     await call.message.delete()
#     return
#
#
# # @user_private_router.callback_query(F.data == 'shop')
# # async def shop_query(call: types.CallbackQuery, state: FSMContext):
# #     await state.clear()
# #     text = '''
# # üõçÔ∏è–ú–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
# #
# # üìï–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:
# #
# #     '''
# #     await call.message.answer(text, reply_markup=shop_kb.as_markup())
# #     await call.message.delete()
# #     return
#
#
# @user_private_router.message(F.text == 'üõçÔ∏è–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤')
# async def shop_query(message: types.Message, state: FSMContext):
#     await state.clear()
#     text = '''<b>üõçÔ∏è–ú–∞–≥–∞–∑–∏–Ω —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
#
# üìï–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:</b>
#     '''
#     await message.answer_photo(photo=FSInputFile('assets/categories.png'), caption=text, reply_markup=shop_kb.as_markup())
#     await message.delete()
#     return
#
#
# @user_private_router.message(F.text == 'üë§–ü—Ä–æ—Ñ–∏–ª—å')
# async def profile_query(message: types.Message, session: AsyncSession):
#     user_id = message.from_user.id
#     user = await orm_get_user(session=session, user_id=int(user_id))
#     text = f'''<b>üë§User ID: <code>{user.user_id}</code>
#
# üë®‚ÄçüíªUsername: @{user.username}
#
# üí∞–ë–∞–ª–∞–Ω—Å: {user.balance} ‚ÇΩ
#
# üõí–ö–æ–ª-–≤–æ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {user.items_count}
#
# üõç–°—É–º–º–∞ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤: {user.items_prices_sum} ‚ÇΩ</b>
#             '''
#     await message.answer_photo(photo=FSInputFile('assets/profile.jpg'), caption=text, reply_markup=profile_kb.as_markup())
#     await message.delete()
#     return
#
#
# class CuponGroup(StatesGroup):
#     cupon_name = State()
#
#     async def clear(self) -> None:
#         await self.set_state(state=None)
#         await self.set_data({})
#
#
# @user_private_router.callback_query(F.data == 'cupon')
# async def cupon_query(callback: types.CallbackQuery, state: FSMContext):
#     text = f'''<b>–í–≤–µ–¥–∏—Ç–µ –∫—É–ø–æ–Ω</b>'''
#     await state.set_state(CuponGroup.cupon_name)
#     await callback.message.answer(text=text)
#     await callback.message.delete()
#     return
#
#
# @user_private_router.callback_query(F.data == 'history')
# async def history_query(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     text = f'''<b>–í–∞—à–∏ –ø–æ–∫—É–ø–∫–∏:\n</b>'''
#     purchases = await get_user_purchases(session=session, user_id=callback.from_user.id)
#     btns ={}
#     for purchase in purchases:
#         btns.update({f"<b>–ó–∞–∫–∞–∑#{purchase.purchase_tag[1:]} - {purchase.item_name}": f"btnhistoty_{purchase.id}</b>"})
#
#     await callback.message.answer(text=text, reply_markup=get_callback_btns(btns=btns, sizes=(1,)))
#     await callback.message.delete()
#     return
#
#
# @user_private_router.callback_query(F.data.startswith('btnhistoty_'))  # VPN_3 (page 3)
# async def btnshistory_callback(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     await state.clear()
#     purchase_id = int(callback.data.split("_")[-1])
#     purchase = await get_purchase(session=session, purchase_id=purchase_id)
#     await callback.message.answer(text=f'''<b>–ó–∞–∫–∞–∑{purchase.purchase_tag}:
#
# –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: {purchase.item_name}
# –ö–æ–ª–∏—á–µ—Ç—Å–≤–æ —Ç–æ–≤–∞—Ä–∞: {purchase.items_count}
# –¶–µ–Ω–∞ –∑–∞ –æ–¥–∏–Ω —Ç–æ–≤–∞—Ä: {purchase.item_price}
# –¶–µ–Ω–∞ –∑–∞ –≤—Å–µ —Ç–æ–≤–∞—Ä—ã: {purchase.items_prices_sum}
#
# –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase.date}</b>
# ''')
#
#
# @user_private_router.message(StateFilter(CuponGroup.cupon_name), F.text)
# async def cupon_message(message: types.Message, session: AsyncSession, state: FSMContext):
#     await state.update_data(cupon_name=message.text)
#     cupon = await get_cupon_price(session=session, cupon_name=message.text)
#     if cupon:
#         user = await orm_get_user(session=session, user_id=message.from_user.id)
#         user.balance += cupon.cupon_price
#         await orm_update_user(session=session, user_id=user.user_id, data={"balance": user.balance})
#         await message.answer(text=f"<b>–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {cupon.cupon_price}</b>")
#         await delete_cupon(session=session, cupon_name=cupon.name)
#         await state.clear()
#     else:
#         await message.answer(text=f"<b>–ö—É–ø–æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</b>")
#         await state.clear()
#     await message.delete()
#     return
#
#
# # --------------------------------------SHOP---------------------------------------
#
#
# @user_private_router.callback_query(
#     F.data.startswith('vpn_') | F.data.startswith('phys_') | F.data.startswith('chatgpt_') | F.data.startswith(
#         'subs_') | F.data.startswith('steampoints_') | F.data.startswith('gift_') | F.data.startswith(
#         'discordnitro_') | F.data.startswith('soc_') | F.data.startswith('mails_'))  # VPN_3 (page 3)
# async def items_callback(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     await state.clear()
#     print(callback.data)
#     pagination_page = int(callback.data.split("_")[-1])
#     obj_name = callback.data.split("_")[-2]
#     # print(pagination_page)
#     print(obj_name)
#     objects = await get_objects_by_name(name=obj_name, session=session)
#     paginated_objects = pagination(objects=objects, page=pagination_page)
#     # print(objects)
#     total_pages = 1
#     if len(objects) > 5:
#         if len(objects) % 5 == 0:
#             total_pages = len(objects) // 5
#         else:
#             total_pages = len(objects) // 5 + 1
#     else:
#         total_pages = 1
#     keyboard = await get_shop_btns(paginated_objects, pagination_page, total_pages, False)
#     text = "<b>" + get_category_text(obj_name) + "</b>"
#     print(f'assets/{obj_name}.png')
#     await send_photomessage_via_telegram_api(chat_id=callback.from_user.id, caption=text,
#                                              photo_path=f'assets/{obj_name}.png', reply_markup=keyboard)
#     await callback.message.delete()
#     return
#
#
# class BuyingItem(StatesGroup):
#     items_count = State()
#     items_payment = State()
#
#     async def clear(self) -> None:
#         await self.set_state(state=None)
#         await self.set_data({})
#
#
# @user_private_router.callback_query(StateFilter(None), F.data.startswith('buy_'))  # VPN_3 (page 3)
# async def buy_callback(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     obj_name = callback.data.split("_")[-2]
#     obj_id = float(callback.data.split("_")[-1])
#     obj = await get_obj_by_name_and_id(id=obj_id, name=obj_name, session=session)
#     count = await get_avaliables(obj)
#     if count == 0:
#         await callback.bot.send_message(callback.from_user.id, text=f"<b>–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!</b>")
#     else:
#         await state.update_data(item=obj)
#         text = f'''<b>
# üõí–¢–æ–≤–∞—Ä: {obj.name}
#
# üìÉ–û–ø–∏—Å–∞–Ω–∏–µ:
# {obj.description}
#
# –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞</b>
#     '''
#         tovarkb_list = [
#             [
#                 InlineKeyboardButton(text="1Ô∏è‚É£", callback_data='1'),
#                 InlineKeyboardButton(text="2Ô∏è‚É£", callback_data='2'),
#                 InlineKeyboardButton(text="3Ô∏è‚É£", callback_data='3'),
#                 InlineKeyboardButton(text="4Ô∏è‚É£", callback_data='4'),
#                 InlineKeyboardButton(text="5Ô∏è‚É£", callback_data='5')],
#             [
#                 InlineKeyboardButton(text="üî¢–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data='your')
#             ],
#             [
#                 InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data=f"{type(obj).__name__.lower()}_1")
#             ]
#         ]
#         tovar_kb = InlineKeyboardBuilder(tovarkb_list)
#         await callback.bot.send_message(callback.from_user.id, text=text, reply_markup=tovar_kb.as_markup())
#         await state.set_state(BuyingItem.items_count)
#     await callback.message.delete()
#     return
#
#
# @user_private_router.message(BuyingItem.items_count, F.text)
# async def count_chosen(message: Message, state: FSMContext, session: AsyncSession):
#     item_counts = int(message.text)
#     state_data = await state.get_data()
#     item = state_data["item"]
#     object_name = type(item).__name__.lower()
#     print(object_name)
#
#     if object_name not in ['phys', 'discordnitro', 'gift']:
#         source_directory = f"sources/{object_name}/{item.file_name}.txt"
#         if not os.path.exists(source_directory):
#             await message.answer(
#                 text=f"<b>–§–∞–π–ª '{source_directory}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @punchmade_support.</b>")
#             await state.clear()
#             return
#
#         async with aiofiles.open(source_directory, mode='r') as f:
#             lines = await f.readlines()
#             lines = [line.strip() for line in lines if line.strip()]
#
#         available_lines = len(lines)
#
#         if available_lines == 0:
#             await message.answer(text=f"<b>–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!</b>")
#             return
#
#         if item_counts > available_lines:
#             await message.answer(
#                 text=f"<b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_lines} —Å—Ç—Ä–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</b>")
#             return
#     else:
#         if item.count == 0:
#             await message.answer(text=f"<b>–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!</b>")
#             return
#
#         if item_counts > item.count:
#             await message.answer(text=f"<b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {item.count}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</b>")
#             return
#
#     tag_item = "#" + str(random.randint(10000000, 99999999))
#     await state.update_data(item_counts=item_counts, tag_item=tag_item)
#     item_name = item.name
#     item_price = item.price
#     items_sum = item_counts * item_price
#     user_balance = await get_balance_by_id(user_id=message.from_user.id, session=session)
#     text = f'''<b>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
# üì¶ –¢–æ–≤–∞—Ä: ‚≠êÔ∏è {item_name}
# üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.description}
# üíµ –¶–µ–Ω–∞: {items_sum}
# üßÆ  –ö–æ–ª-–≤–æ: {item_counts}
# ‚úâÔ∏è –ó–∞–∫–∞–∑: {tag_item}
# ‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now()}
# üí∏ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞
# üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID: {message.from_user.id}
# üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{message.from_user.username if message.from_user.username else 'None'}
# {'üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É - @punchmade_support –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' if item_name in ['discordnitro', 'phys', 'gift'] else ''}
# ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ</b>
# '''
#     btns = {"–û–ø–ª–∞—Ç–∏—Ç—å": f"oplatit_{float(message.text) * item_price}"} if user_balance >= items_sum else {
#         "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å": f"deposite"}
#     await message.answer(
#         text=text,
#         reply_markup=get_inlineMix_btns(btns=btns)
#     )
#     await state.set_state(BuyingItem.items_payment)
#
#
# @user_private_router.callback_query(BuyingItem.items_count, F.data)
# async def count_chosen(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     if call.data not in ['1', '2', '3', '4', '5', 'your']:
#         return
#     if call.data == 'your':
#         await call.message.answer(text='<B>–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞</b>')
#         return
#     item_counts = int(call.data)
#     state_data = await state.get_data()
#     item = state_data["item"]
#     object_name = type(item).__name__.lower()
#     print(object_name + 'tut')
#     if object_name not in ['phys', 'discordnitro', 'gift']:
#         source_directory = f"sources/{object_name}/{item.file_name}.txt"
#         if not os.path.exists(source_directory):
#             await call.message.answer(
#                 text=f"<b>–§–∞–π–ª '{source_directory}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É @punchmade_support.</b>")
#             await state.clear()
#             return
#
#         async with aiofiles.open(source_directory, mode='r') as f:
#             lines = await f.readlines()
#             lines = [line.strip() for line in lines if line.strip()]
#
#         available_lines = len(lines)
#
#         if available_lines == 0:
#             await call.message.answer(text=f"<b>–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!</b>")
#             return
#
#         if item_counts > available_lines:
#             await call.message.answer(
#                 text=f"<b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_lines} —Å—Ç—Ä–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</b>")
#             return
#     else:
#         if item.count == 0:
#             await call.message.answer(text=f"<b>–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏!</b>")
#             return
#
#         if item_counts > item.count:
#             await call.message.answer(
#                 text=f"<b>–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {item.count}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–µ–Ω—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ.</b>")
#             return
#
#     tag_item = "#" + str(random.randint(10000000, 99999999))
#     await state.update_data(item_counts=item_counts, tag_item=tag_item)
#     item_name = item.name
#     item_price = item.price
#     items_sum = item_counts * item_price
#     user = await orm_get_user(user_id=call.from_user.id, session=session)
#     user_balance = await get_balance_by_id(user_id=call.from_user.id, session=session)
#     text = f'''<b>‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
# üì¶ –¢–æ–≤–∞—Ä: ‚≠êÔ∏è {item_name}
# üìù –û–ø–∏—Å–∞–Ω–∏–µ: {item.description}
# üíµ –¶–µ–Ω–∞: {items_sum}
# üßÆ  –ö–æ–ª-–≤–æ: {item_counts}
# ‚úâÔ∏è –ó–∞–∫–∞–∑: {tag_item}
# ‚è∞ –í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {datetime.now()}
# üí∏ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: –ë–∞–ª–∞–Ω—Å –±–æ—Ç–∞
# üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å ID: {call.from_user.id}
# üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{call.from_user.username if call.from_user.username else 'None'}
# {'üìÑ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É - @punchmade_support –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞' if item_name in ['discordnitro', 'phys', 'gift'] else ''}
# ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ</b>
# '''
#     btns = {"–û–ø–ª–∞—Ç–∏—Ç—å": f"oplatit_{float(call.data) * item_price}"} if user.balance >= items_sum else {
#         "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å": f"deposite"}
#     await call.message.answer(
#         text=text,
#         reply_markup=get_inlineMix_btns(btns=btns)
#     )
#     await state.set_state(BuyingItem.items_payment)
#
#
# @user_private_router.callback_query(BuyingItem.items_payment, F.data.startswith('oplatit_'))  # VPN_3 (page 3)
# async def oplatit_callback(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     state_data = await state.get_data()
#     item = state_data["item"]
#     item_counts = state_data["item_counts"]
#     tag_item = state_data["tag_item"]
#     items_price = float(callback.data.split("_")[-1])
#     user = await orm_get_user(user_id=callback.from_user.id, session=session)
#     object_name = type(item).__name__.lower()
#     if user.balance >= items_price and item_counts <= item.count:
#         user.balance -= items_price
#         user.items_count += 1
#         user.items_prices_sum += items_price
#         item.count -= item_counts
#         purchase = Purchase(
#             user_id=user.user_id,
#             item_name=item.name,
#             purchase_tag=tag_item,
#             item_price=item.price,
#             items_count=item_counts,
#             items_prices_sum=item_counts * item.price,
#         )
#         await orm_add_object(purchase, session=session)
#         log_text = f"[{datetime.now()}] {tag_item} - {user.username} - {item.name} - {item.price} - {item_counts} - {item_counts * item.price}"
#         await orm_add_user(session=session, user=user)
#         await append_to_file(log_text)
#         await state.clear()
#         document = await give_strings(object_name, item.name, item.file_name, item_counts)
#         if document:
#             if type(document) is list:
#                 await callback.bot.send_document(chat_id=callback.from_user.id,
#                                                  document=FSInputFile(document[0], document[1]))
#                 await clear_trash(document[0])
#             elif type(document) is str:
#                 await callback.message.answer(text=document)
#         else:
#             await callback.message.answer(
#                 text="<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫—É.</b>")
#     else:
#         await state.clear()
#         await deposite_query(callback)
#         await callback.message.delete()
#     await state.clear()
#     return
#
#
# # ---------------------DEPOSITS------------------------------
#
# class DepositeFSM(StatesGroup):
#     popolnenie = State()
#
#     async def clear(self) -> None:
#         await self.set_state(state=None)
#         await self.set_data({})
#
#
# class CryptomusFSM(StatesGroup):
#     popolnenie = State()
#
#     async def clear(self) -> None:
#         await self.set_state(state=None)
#         await self.set_data({})
#
#
# class ZelenkaFSM(StatesGroup):
#     popolnenie = State()
#
#     async def clear(self) -> None:
#         await self.set_state(state=None)
#         await self.set_data({})
#
#
# @user_private_router.callback_query(F.data == 'deposite')
# async def deposite_query(callback: types.CallbackQuery):
#     text = f'''
# üí∏–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
#
# #
# '''
#     await callback.message.answer(text=text, reply_markup=deposite_kb.as_markup())
#     await callback.message.delete()
#     return
#
#
# @user_private_router.callback_query(F.data == 'cryptobot_sum')
# async def deposite_sum_query(callback: types.CallbackQuery, state: FSMContext):
#     text = f'''<b>–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>'''
#     await state.set_state(DepositeFSM.popolnenie)
#     await callback.message.answer(text=text)
#     await callback.message.delete()
#     return
#
#
# @user_private_router.message(DepositeFSM.popolnenie, F.text)
# async def deposite_sum_query(message: types.Message, state: FSMContext):
#     await state.update_data(sum=int(message.text))
#     await crypto_bot_pay_query(
#         callback=types.CallbackQuery(id=str(random.randint(1000000, 5000000)),  # –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
#                                      data='cryptoBot',
#                                      from_user=message.from_user,  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤—à–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#                                      chat_instance=str(message.chat.id)), state=state)
#     return
#
#
# # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏
# @user_private_router.callback_query(DepositeFSM.popolnenie, F.data == 'cryptoBot')
# async def crypto_bot_pay_query(callback: types.CallbackQuery, state: FSMContext):
#     text = f'''<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç</b>'''
#     sum = await state.get_data()
#     sum = sum["sum"]
#     invoice = await get_invoice(sum)
#     link = invoice.bot_invoice_url
#     keyboard = get_cryptobot_btns(link=link, invoice=invoice)
#     await send_message_via_telegram_api(chat_id=callback.from_user.id, text=text,
#                                         reply_markup=keyboard)
#     return
#
#
# @user_private_router.callback_query(F.data == 'cryptomus_sum')
# async def deposite_sum_query(callback: types.CallbackQuery, state: FSMContext):
#     text = f'''<b>–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>'''
#     await state.set_state(CryptomusFSM.popolnenie)
#     await callback.message.answer(text=text)
#     await callback.message.delete()
#     return
#
#
# @user_private_router.message(CryptomusFSM.popolnenie, F.text)
# async def deposite_mus_sum_query(message: types.Message, state: FSMContext):
#     sum = float(message.text) / (await get_rub_course())
#     print(sum)
#     await state.update_data(sum=sum)
#     text = f'''<b>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ —Å—á–µ—Ç</b>'''
#     sum = await state.get_data()
#     sum = sum["sum"]
#     comment = generate_random_string()
#     await state.update_data(comment=comment)
#     invoice = await create_invoice(user_id=message.from_user.id, amount=sum, comment=comment)
#     print(invoice)
#     link = invoice['result']['url']
#     keyboard = get_cryptomus_btns(link=link, invoice=invoice)
#     await send_message_via_telegram_api(chat_id=message.from_user.id, text=text,
#                                         reply_markup=keyboard)
#     return
#
#
# @user_private_router.callback_query(F.data == 'zelenka_sum')
# async def deposite_sum_query(callback: types.CallbackQuery, state: FSMContext):
#     text = f'''<b>–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>'''
#     await state.set_state(ZelenkaFSM.popolnenie)
#     await callback.message.answer(text=text)
#     await callback.message.delete()
#     return
#
#
# # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –æ–ø–ª–∞—Ç–∞ –∑–µ–ª–µ–Ω–∫–æ–π
# @user_private_router.message(ZelenkaFSM.popolnenie)
# async def zelenka_payment_query(message: types.Message, state: FSMContext):
#     try:
#         sum = int(message.text)
#         print(sum)
#         await state.update_data(sum=sum)
#     except:
#         await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')
#         return
#     comment = message.from_user.id
#     text = f'''
# –î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ!
# ‚ùóÔ∏è–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å:
# -–°—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞
# -–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É
# -–ü–æ–ª—É—á–∞—Ç–µ–ª—è
# -–ó–∞–º–æ—Ä–∞–∂–∏–≤–∞—Ç—å –ø–ª–∞—Ç–µ–∂
#
# –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É" '''
#     link = f'https://lzt.market/balance/transfer?redirect=https%3A%2F%2Fapi.bot-t.com%2Fpayment%2Flolz%2Fsuccess%2F{comment}&username={config.LOLZ_USERNAME}&comment={comment}&amount={sum * 1.07}'
#     await message.answer(text=text, reply_markup=get_inlineMix_btns(btns={"–û–ø–ª–∞—Ç–∏—Ç—å": f"{link}",
#                                                                           "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É": f"checkPaymentZelenka_{comment}",
#                                                                           "–ù–∞–∑–∞–¥": "deposite"}))
#     await message.delete()
#     return
#
#
# @user_private_router.callback_query(F.data.startswith("checkPaymentZelenka_"))
# async def check_payment_zelenka_query(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     comment_id = int(callback.data.split("_")[-1])
#     state_data = await state.get_data()
#     sum = state_data['sum']
#     print(comment_id)
#     response = await get_history(comment=comment_id)
#     print(response)
#     result = await check_payment_lolz(response, sum)
#     print(result)
#     if result is None:
#         await callback.answer(text="–û–∂–∏–¥–∞–π—Ç–µ", show_alert=True)
#         return
#
#     # await callback.message.delete()
#     user_id = callback.from_user.id
#
#     user = await orm_get_user(session=session, user_id=int(user_id))
#     if user.ref_id != 0:
#         try:
#             refer = await orm_get_user(session=session, user_id=user.ref_id)
#             await add_balance_by_username(session=session, username=refer.username, amount=result * 0.05)
#             await callback.bot.send_message(user.ref_id, f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {result * 0.05}")
#         except Exception as e:
#             print(e)
#     await callback.answer(text="–ü–ª–∞—Ç–µ–∂ –Ω–∞–π–¥–µ–Ω,–¥–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à —Å—á–µ—Ç.", show_alert=True)
#     user.balance += result
#     await orm_update_user(session=session, user_id=user_id, data={"balance": user.balance})
#     await callback.message.delete()
#     # await menu_msg(callback.message)
#
#
# # –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å" –ø–æ–¥ –æ–ø–ª–∞—Ç–æ–π –∫—Ä–∏–ø—Ç–æ–±–æ—Ç–æ–º
# def menu_query(callback):
#     pass
#
#
# @user_private_router.callback_query(DepositeFSM.popolnenie, F.data.startswith("checkPaymentCrypto_"))
# async def check_payment_crypto_query(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     invoice_id = int(callback.data.split("_")[-1])
#     invoice = await invoice_by_id(invoice_id)
#     result = await check_invoice(invoice_id)
#     if result == 'active':
#         await callback.answer(text="–û–∂–∏–¥–∞–π—Ç–µ", show_alert=True)
#     if result == 'paid':
#         user = await orm_get_user(user_id=callback.from_user.id, session=session)
#         if user.ref_id != 0:
#             try:
#                 refer = await orm_get_user(session=session, user_id=user.ref_id)
#                 await add_balance_by_username(session=session, username=refer.username, amount=invoice.amount * 0.05)
#                 await callback.bot.send_message(user.ref_id,
#                                                 f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {invoice.amount * 0.05}")
#             except:
#                 ...
#         await state.clear()
#         user_id = callback.from_user.id
#         await callback.message.answer(text=f"<b>üí∏–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {invoice.amount}‚ÇΩ</b>")
#         user.balance += invoice.amount
#         await orm_update_user(session=session, user_id=user_id, data={"balance": user.balance})
#         await delete_invoice(invoice_id)
#         # await menu_query(callback)
#         await callback.message.delete()
#
#
# @user_private_router.callback_query(CryptomusFSM.popolnenie, F.data.startswith("checkPaymentMus_"))
# async def check_payment_crypto_query(callback: types.CallbackQuery, session: AsyncSession, state: FSMContext):
#     invoice = await get_invoice_mus(callback.data.split("_")[-1])
#     status = invoice['result']['status']
#     print(status)
#     if status == 'paid' or status == 'paid_over':
#         amount = float(invoice['result']['amount']) * (await get_rub_course())
#         user = await orm_get_user(user_id=callback.from_user.id, session=session)
#         if user.ref_id != 0:
#             try:
#                 refer = await orm_get_user(session=session, user_id=user.ref_id)
#                 await add_balance_by_username(session=session, username=refer.username, amount=amount * 0.05)
#                 await callback.bot.send_message(user.ref_id,
#                                                 f"–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø–æ–ø–æ–ª–Ω–∏–ª —Å—á–µ—Ç, –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount * 0.05}")
#             except:
#                 ...
#         await state.clear()
#         user_id = callback.from_user.id
#         await callback.message.answer(text=f"<b>üí∏–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚ÇΩ</b>")
#         user.balance += amount
#         await orm_update_user(session=session, user_id=user_id, data={"balance": user.balance})
#         # await menu_query(callback)
#         await callback.message.delete()
#     else:
#         await callback.answer(text="–û–∂–∏–¥–∞–π—Ç–µ", show_alert=True)
#
#
# # @user_private_router.message(F.text == 'test')
# # async def test(message: types.Message, state: FSMContext):
# #     await get_rub_course()
# # ----------------------------------------------SMS-----------------------------------------
# # –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∫–æ–¥–µ—Ä–∞
# # –µ—Å–ª–∏ –±—É–¥—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–¥—É, –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤ —Ç–≥, —è –ø–æ–º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è
# # @cncntrated
# # —Ç–∞–º –∞–¥–º–∏–Ω–∫—É –¥–æ–ø–∏–ª–∏—Ç—å –Ω—É–∂–Ω–æ –µ—â–µ –ø–æ–¥ —Ç–æ–≤–∞—Ä
#
# class SMSShop(StatesGroup):
#     kupit_sms = State()
#     multiservice_chose = State()
#     multiservice_country = State()
#     search_service = State()
#     ojidanie_sms = State()
#
#     async def clear(self) -> None:
#         await self.set_state(state=None)
#         await self.set_data({})
#
#
# # await state.update_data(item_counts=item_counts, tag_item=tag_item)
# #     state_data = await state.get_data()
# #     item = state_data["item"]
# #     item_name = item.name
# #     item_price = item.price
# #     items_sum = item_counts*item_price
#
#
# @user_private_router.message(F.text == 'üì©Sms shop')
# async def vhod_v_sms_shop_msg(message: types.Message, state: FSMContext, session: AsyncSession):
#     await message.answer_photo(photo=FSInputFile('assets/sms.png'), caption=f"<b>ü§ö–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SMS SHOP!</b>",
#                                reply_markup=sms_shop_markup)
#     await message.delete()
#
#
# @user_private_router.message(F.text == "üëä–ú–µ–Ω—é")
# async def menu_from_sms_shop(message: types.Message, state: FSMContext, session: AsyncSession):
#     await state.clear()
#     await message.answer(f'''<b>üëä–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:</b>
#             ''', reply_markup=menu_markup)
#     await message.delete()
#
#
# # –ü–û–ö–£–ü–ö–ê –°–ú–°
#
#
# @user_private_router.message(F.text.contains('–ö—É–ø–∏—Ç—å'))
# async def sms_kupit_msg(message: types.Message, state: FSMContext, session: AsyncSession):
#     await state.set_state(SMSShop.kupit_sms)
#     pagination_page = 1
#     objects = await get_services_orm(session=session)
#     paginated_objects = pagination_sms(objects=objects, page=pagination_page)
#     print(objects)
#     total_pages = 1
#     if len(objects) > 18:
#         if len(objects) % 18 == 0:
#             total_pages = len(objects) // 18
#         else:
#             total_pages = len(objects) // 18 + 1
#     else:
#         total_pages = 1
#     keyboard = get_sms_btns(paginated_objects, pagination_page, total_pages)
#     await send_message_via_telegram_api(chat_id=message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=keyboard)
#     await message.delete()
#     return
#
#
# # –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —à–æ–ø–∞ –ø–æ–∫—É–ø–∫–∏ —Å–º—Å
# @user_private_router.callback_query(F.data.startswith('sms_'))
# async def sms_shop_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     if await state.get_state() != SMSShop.kupit_sms.state:
#         await state.set_state(SMSShop.kupit_sms)
#
#     pagination_page = int(call.data.split("_")[-1])
#     objects = await get_services_orm(session=session)
#     paginated_objects = pagination_sms(objects=objects, page=pagination_page)
#     print(objects)
#     total_pages = 1
#     if len(objects) > 18:
#         if len(objects) % 18 == 0:
#             total_pages = len(objects) // 18
#         else:
#             total_pages = len(objects) // 18 + 1
#     else:
#         total_pages = 1
#     keyboard = get_sms_btns(paginated_objects, pagination_page, total_pages)
#     await send_message_via_telegram_api(chat_id=call.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å:", reply_markup=keyboard)
#     await call.message.delete()
#     return
#
#
# @user_private_router.callback_query(SMSShop.kupit_sms, F.data.startswith('smsservice_'))  # smsservice_tg_2
# async def sms_service_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     service_tag = call.data.split("_")[-2]
#     country_page = int(call.data.split("_")[-1])
#
#     await state.update_data(service_tag=service_tag)
#
#     countries = get_countries_by_service(service=service_tag)
#
#     paginated_objects = pagination_dict(countries, page=country_page, paginate=5)
#
#     total_pages = 1
#     if len(countries) > 5:
#         if len(countries) % 5 == 0:
#             total_pages = len(countries) // 5
#         else:
#             total_pages = len(countries) // 5 + 1
#     else:
#         total_pages = 1
#
#     sms_countries = await get_sms_countries_btns(countries_dict=paginated_objects,
#                                                  current_page=country_page,
#                                                  total_pages=total_pages,
#                                                  service_tag=service_tag,
#                                                  session=session)
#
#     if sms_countries:
#         await send_message_via_telegram_api(chat_id=call.from_user.id, text='üá≤üáΩ–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –Ω–æ–º–µ—Ä–∞',
#                                             reply_markup=sms_countries)
#     else:
#         await send_message_via_telegram_api(chat_id=call.from_user.id, text='‚ùå–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
#
#     await call.message.delete()
#     return
#
#
# #  f"buysms_{service_tag}_{country_id}"
#
# @user_private_router.callback_query(SMSShop.kupit_sms, F.data.startswith("buysms_"))
# async def buy_sms_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     service_tag = call.data.split("_")[-2]
#     country_id = int(call.data.split("_")[-1])
#     await state.update_data(country_id=country_id)
#
#     price_data = get_price_by_service_and_country(service=service_tag, country_id=country_id)
#     if not price_data:
#         await call.message.answer(text="–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#         return
#
#     price = float(price_data[f'{country_id}'][service_tag]['cost'])
#     price_with_markup = get_price_with_markup(price)
#
#     if not await check_user_balance(call.from_user.id, session, price_with_markup):
#         await call.message.answer(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.")
#         return
#
#     await state.update_data(total_price=price_with_markup)
#     activation = get_sms_number(service_tag=service_tag, country_id=country_id)
#     activation_id = int(activation['activationId'])
#     await state.update_data(activation_id=activation_id, activation=activation)
#     user = await orm_get_user(session=session, user_id=call.from_user.id)
#     user.balance -= price_with_markup
#     await orm_add_user(session=session, user=user)
#     # await add_balance_by_username(username=call.from_user.username, session=session, amount=-price_with_markup)
#
#     await call.message.answer(text=f'''
# üì± –í–∞—à –Ω–æ–º–µ—Ä: +{activation['phoneNumber']}
# üì± –ù–æ–º–µ—Ä –±–µ–∑ –∫–æ–¥–∞ —Å—Ç—Ä–∞–Ω—ã: <code>{activation['phoneNumber']}</code>
# ‚è≥ –í—Ä–µ–º—è –Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—é: 20 –º–∏–Ω—É—Ç.
#
# ‚ùì FAQ:
# - –ü–æ–ø–∞–ª—Å—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –Ω–∞ –Ω–µ–≥–æ –ù–ï –ø—Ä–∏—Ö–æ–¥–∏–ª –°–ú–° –∫–æ–¥? –û—Ç–º–µ–Ω–∏—Ç–µ –µ–≥–æ, –±–∞–ª–∞–Ω—Å –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –±–æ—Ç.
# - –ù–æ–º–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
# –∏ –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏—à–µ–ª –∫–æ–¥ –≤ —Ç–µ—á–µ–Ω–∏–∏ 20 –º–∏–Ω—É—Ç.
# - –ï—Å–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç–µ –Ω–æ–º–µ—Ä, —Ç–æ –≤—ã—Ö–æ–¥–∏—Ç–µ —Å –æ–∫–Ω–∞ –≤–≤–æ–¥–∞ –∫–æ–¥–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω—ã –Ω–æ–º–µ—Ä–∞. –ö–æ–¥ –º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ –≤–æ –≤—Ä–µ–º—è –æ—Ç–º–µ–Ω—ã –∏–∑-–∑–∞ –∑–∞–¥–µ—Ä–∂–∫–∏.
# - –ö–æ–¥ –ø—Ä–∏–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!
# - –°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –°–ú–° –∫–æ–¥–∞? –ü–∏—à–∏ @Punchmade_Support,
# –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ —Å–∫—Ä–∏–Ω–∞–º–∏.
#
# <u>–¢–µ–ª–µ–≥—Ä–∞–º –Ω—É–∂–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram. –ò–Ω–∞—á–µ –∫–æ–¥ –º–æ–∂–µ—Ç –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å. –ï—Å–ª–∏ –∫–æ–¥ –∏–¥–µ—Ç –Ω–∞ –¥—Ä—É–≥–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Ç–æ –æ—Ç–º–µ–Ω—è–π—Ç–µ –Ω–æ–º–µ—Ä.</u>
# ''', reply_markup=pokupka_sms_kb)
#     await state.set_state(SMSShop.ojidanie_sms)
#     while True:
#         status = get_activation_status(activation_id)
#         print(status)
#         if 'canceled' in status:
#             break
#         if 'STATUS_OK' in status:
#             result = status.split(":")[-1]
#             await call.message.answer(text=f'''–í–∞—à –∫–æ–¥: {result}''', reply_markup=menu_markup)
#             status.clear()
#             print("–£–°–ü–ï–•")
#             break
#         await asyncio.sleep(5)
#
#
# @user_private_router.message(SMSShop.ojidanie_sms, F.text == '‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É')
# async def sms_shop_msg(message: types.Message, state: FSMContext, session: AsyncSession):
#     state_data = await state.get_data()
#     activation_id = state_data['activation_id']
#     print(activation_id)
#     status = get_activation_status(activation_id)
#
#     print(status)
#     price_with_markup = state_data['total_price']
#     if 'Current activation canceled and no longer' in status:
#         await message.answer(text=f'''‚úÖ–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞''', reply_markup=menu_markup)
#         user = await orm_get_user(session=session, user_id=message.from_user.id)
#         user.balance += price_with_markup
#         await orm_add_user(session=session, user=user)
#         await state.clear()
#         return
#     if 'STATUS_OK' not in status:
#         cancel = cancel_activation(activation_id)
#         print(cancel)
#         if 'ACCESS_CANCEL' in cancel:
#             await message.answer(text=f'''‚úÖ–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞''', reply_markup=menu_markup)
#             user = await orm_get_user(session=session, user_id=message.from_user.id)
#             user.balance += price_with_markup
#             await orm_add_user(session=session, user=user)
#             await state.clear()
#             return
#         if 'EARLY_CANCEL_DENIED' in cancel:
#             await message.answer(text=f'''
# ‚ö°Ô∏è–í –ø–µ—Ä–≤—ã–µ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ
# ''')
#     await message.delete()
#     return
#
#
# @user_private_router.message(F.text.contains('–ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å'))
# async def sms_multiservice_msg(message: types.Message, state: FSMContext, session: AsyncSession):
#     await state.set_state(SMSShop.multiservice_chose)
#     pagination_page = 1
#     objects = await get_services_orm(session=session)
#     paginated_objects = pagination_sms(objects=objects, page=pagination_page)
#     await state.update_data(chosen_services=[])
#     total_pages = 1
#     if len(objects) > 18:
#         if len(objects) % 18 == 0:
#             total_pages = len(objects) // 18
#         else:
#             total_pages = len(objects) // 18 + 1
#     else:
#         total_pages = 1
#     keyboard = get_multiservice_btns(objects=paginated_objects, current_page=pagination_page, total_pages=total_pages,
#                                      chosen_objects=[])
#     await send_message_via_telegram_api(chat_id=message.from_user.id, text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 —Å–µ—Ä–≤–∏—Å–æ–≤:",
#                                         reply_markup=keyboard)
#     await message.delete()
#     return
#
#
# # –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–º—Å —Å–µ—Ä–≤–∏—Å–æ–≤
# @user_private_router.callback_query(F.data.startswith('smsmulti_'))
# async def sms_shop_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     if await state.get_state() != SMSShop.multiservice_chose.state:
#         await state.set_state(SMSShop.multiservice_chose)
#
#     pagination_page = int(call.data.split("_")[-1])
#     objects = await get_services_orm(session=session)
#     paginated_objects = pagination_sms(objects=objects, page=pagination_page)
#     fsmdata = await state.get_data()
#     chosen_services = fsmdata["chosen_services"]
#     print(objects)
#     total_pages = 1
#     if len(objects) > 18:
#         if len(objects) % 18 == 0:
#             total_pages = len(objects) // 18
#         else:
#             total_pages = len(objects) // 18 + 1
#     else:
#         total_pages = 1
#     keyboard = get_multiservice_btns(objects=paginated_objects, current_page=pagination_page,
#                                      total_pages=total_pages, chosen_objects=chosen_services)
#     await send_message_via_telegram_api(chat_id=call.from_user.id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ 5 —Å–µ—Ä–≤–∏—Å–æ–≤:',
#                                         reply_markup=keyboard)
#     await call.message.delete()
#     return
#
#
# # –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –∫ –º—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å–∞–º
# @user_private_router.callback_query(SMSShop.multiservice_chose, F.data.startswith('multiadd_'))
# async def sms_shop_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     fsmdata = await state.get_data()
#     chosen_services = fsmdata["chosen_services"]
#     if len(chosen_services) == 5:
#         await call.answer(text='–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏ 5 —Å–µ—Ä–≤–∏—Å–æ–≤, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É, –ª–∏–±–æ —Å–±—Ä–æ—Å—å—Ç–µ —Å–µ—Ä–≤–∏—Å—ã',
#                           show_alert=True)
#         return
#     else:
#         await call.message.delete()
#         service_tag = call.data.split("_")[-1]
#         chosen_services.append(service_tag)
#         print(chosen_services)
#         await state.update_data(chosen_services=chosen_services)
#         pagination_page = 1
#         objects = await get_services_orm(session=session)
#         paginated_objects = pagination_sms(objects=objects, page=pagination_page)
#         total_pages = 1
#         if len(objects) > 18:
#             if len(objects) % 18 == 0:
#                 total_pages = len(objects) // 18
#             else:
#                 total_pages = len(objects) // 18 + 1
#         else:
#             total_pages = 1
#         keyboard = get_multiservice_btns(objects=paginated_objects, current_page=pagination_page,
#                                          total_pages=total_pages, chosen_objects=chosen_services)
#         await send_message_via_telegram_api(chat_id=call.from_user.id, text="–ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å",
#                                             reply_markup=keyboard)
#
#         return
#
#
# # –æ—á–∏—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ—Ç –≤—Å–µ—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
# @user_private_router.callback_query(SMSShop.multiservice_chose, F.data.startswith('clearmulti_'))
# async def sms_shop_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     await state.update_data(chosen_services=[])
#     chosen_services = []
#     pagination_page = 1
#     objects = await get_services_orm(session=session)
#     paginated_objects = pagination_sms(objects=objects, page=pagination_page)
#     total_pages = 1
#     if len(objects) > 18:
#         if len(objects) % 18 == 0:
#             total_pages = len(objects) // 18
#         else:
#             total_pages = len(objects) // 18 + 1
#     else:
#         total_pages = 1
#     keyboard = get_multiservice_btns(objects=paginated_objects, current_page=pagination_page,
#                                      total_pages=total_pages, chosen_objects=chosen_services)
#     await send_message_via_telegram_api(chat_id=call.from_user.id, text="–ú—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å",
#                                         reply_markup=keyboard)
#     await call.message.delete()
#     return
#
#     # countries = await get_countries_by_multiservice(session=session)
#     #
#     # paginated_objects = pagination(countries, page=1, paginate=5)
#     #
#     # total_pages = 1
#     # if len(countries) > 5:
#     #     if len(countries) % 5 == 0:
#     #         total_pages = len(countries) // 5
#     #     else:
#     #         total_pages = len(countries) // 5 + 1
#     # else:
#     #     total_pages = 1
#     #
#     # await send_message_via_telegram_api(chat_id=call.from_user.id, text='—Å—Ç—Ä–∞–Ω—ã –ø–æ —Å–µ—Ä–≤–∏—Å—É',
#     #                                     reply_markup=await get_sms_countries_btns(countries_dict=paginated_objects,
#     #                                                                               # —É–∂–µ –æ—Ç–ø–∞–≥–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
#     #                                                                               current_page=country_page,
#     #                                                                               # —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å 1, –Ω–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã 0
#     #                                                                               total_pages=total_pages,
#     #                                                                               service_tag=service_tag,
#     #                                                                               session=session))
#
#
# # –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—ã–±–æ—Ä —Å—Ç—Ä–∞–Ω—ã –¥–ª—è –º—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å–æ–≤
# @user_private_router.callback_query(SMSShop.multiservice_chose, F.data.startswith('choosecountrymultisms_'))
# async def sms_shop_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     fsmdata = await state.get_data()
#     chosen_services = fsmdata["chosen_services"]
#     country_page = int(call.data.split("_")[-1])
#
#     countries = await get_countries_by_multiservice(session)
#
#     paginated_objects = pagination(countries, page=country_page, paginate=5)
#
#     total_pages = 1
#     if len(countries) > 5:
#         if len(countries) % 5 == 0:
#             total_pages = len(countries) // 5
#         else:
#             total_pages = len(countries) // 5 + 1
#     else:
#         total_pages = 1
#
#     multiservices = await get_multiservice_countries_btns(countries_objects=paginated_objects,
#                                                           chosen_services=chosen_services, current_page=country_page,
#                                                           total_pages=total_pages)
#     if multiservices:
#         await send_message_via_telegram_api(chat_id=call.from_user.id, text='–°—Ç—Ä–∞–Ω—ã –ø–æ –º—É–ª—å—Ç–∏—Å–µ—Ä–≤–∏—Å–∞–º',
#                                             reply_markup=multiservices)
#     else:
#         await send_message_via_telegram_api(chat_id=call.from_user.id, text='‚ùå–¢–æ–≤–∞—Ä–∞ –Ω–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏')
#
#
# @user_private_router.callback_query(SMSShop.multiservice_chose, F.data.startswith('buymultisms_'))
# async def sms_shop_query(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     country_id = int(call.data.split("_")[-1])
#     await state.update_data(country_id=country_id)
#     fsmdata = await state.get_data()
#     chosen_services = fsmdata["chosen_services"]
#
#     total_price = 0
#     for service in chosen_services:
#         price_data = get_price_by_service_and_country(service=service, country_id=country_id)
#         if not price_data:
#             await call.message.answer(text="–û–¥–∏–Ω –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
#             return
#         price = float(price_data[f'{country_id}'][service]['cost'])
#         total_price += get_price_with_markup(price)
#
#     if not await check_user_balance(call.from_user.id, session, total_price):
#         await call.message.answer(text="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–ª—è —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏.")
#         return
#
#     resp = get_multi_numbers(chosen_services, country_id)
#     print(resp)
#     if isinstance(resp, str):
#         await call.message.answer(text=resp)
#     elif isinstance(resp, dict):
#         activation_id = resp['activationId']
#         await state.update_data(activation_id=activation_id, activation=resp)
#
#         user = await orm_get_user(session=session, user_id=call.from_user.id)
#         user.balance -= total_price
#         await orm_add_user(session=session, user=user)
#
#         await call.message.answer(text=f'''
# –Ω–æ–º–µ—Ä –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {resp['phoneNumber']}
# –¥–∞—Ç–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {resp['activationTime']}
# ''', reply_markup=pokupka_sms_kb)
#         await state.set_state(SMSShop.ojidanie_sms)
#         while True:
#             status = get_activation_status(activation_id)
#             if 'canceled' in status:
#                 break
#             if 'STATUS_OK' in status:
#                 await call.message.answer(text=f'''–í–∞—à –∫–æ–¥: {status['STATUS_OK']}''', reply_markup=menu_markup)
#                 status.clear()
#                 print("–£–°–ü–ï–•")
#                 break
#             await asyncio.sleep(5)
#     else:
#         print(type(resp))
#         await call.message.answer(text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–æ–º–µ—Ä–∞')
#
#
# @user_private_router.callback_query(SMSShop.kupit_sms, F.data == "search_sms_service")
# async def search_sms_service(call: types.CallbackQuery, state: FSMContext):
#     await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
#     await state.set_state(SMSShop.search_service)
#
#
# @user_private_router.message(SMSShop.search_service, F.text)
# async def search_service_result(message: types.Message, state: FSMContext, session: AsyncSession):
#     search_query = message.text.lower()
#     services = await get_services_orm(session=session)
#
#     matched_services = [service for service in services if search_query in service.name.lower()]
#
#     if matched_services:
#         keyboard = get_sms_btns(matched_services, current_page=1, total_pages=1)
#         await send_message_via_telegram_api(chat_id=message.from_user.id, text="–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:",
#                                             reply_markup=keyboard)
#     else:
#         await message.answer("–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
#
#     await state.set_state(SMSShop.kupit_sms)
#
#
# @user_private_router.message(F.text.contains('–ú–∞–Ω—É–∞–ª—ã'))
# async def search_service_result(message: types.Message, state: FSMContext, session: AsyncSession):
#     await message.answer(text=f'''
# üìö<b>–ú–ê–ù–£–ê–õ–´</b> - @PUNCHMADEBIO
# ''')
#
#
# class PerevodFSM(StatesGroup):
#     sum = State()
#     username = State()
#     confirmation = State()
#
#     async def clear(self) -> None:
#         await self.set_state(state=None)
#         await self.set_data({})
#
#
# @user_private_router.callback_query(F.data.contains('perevesti'))
# async def search_service_result(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     await state.set_state(PerevodFSM.sum)
#     await call.message.answer(text='<b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞</b>')
#
#
# @user_private_router.message(PerevodFSM.sum)
# async def search_service_result(message: types.Message, state: FSMContext, session: AsyncSession):
#     try:
#         amount = int(message.text)
#     except:
#         await state.clear()
#         await message.answer(text='<b>–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—É–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞</b>')
#         return
#     sender = await orm_get_user(session=session, user_id=message.from_user.id)
#     if sender.balance < amount:
#         await state.clear()
#         await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞")
#         return
#
#     await state.update_data(sender_user_id=message.from_user.id, amount=amount)
#     await message.answer("<b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä—ã–π –ø–æ–ª—É—á–∏—Ç –ø–µ—Ä–µ–≤–æ–¥</b>")
#     await state.set_state(PerevodFSM.username)
#
#
# @user_private_router.message(PerevodFSM.username)
# async def search_service_result(message: types.Message, state: FSMContext, session: AsyncSession):
#     username = message.text
#     # –ï—Å–ª–∏ —é–∑–µ—Ä –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å @, —É–¥–∞–ª—è–µ–º —Å–∏–º–≤–æ–ª @
#     if username.startswith('@'):
#         username = username[1:]
#     # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     user = await orm_get_user_by_username(session, username)
#
#     if not user or username == 'None':
#         await state.clear()
#         await message.answer("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω</b>")
#         return
#
#     await state.update_data(geter_user_id=user.user_id)
#     state_data = await state.get_data()
#     await message.answer(text=f'''<b>
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}
# –°—É–º–º–∞: {state_data['amount']}
# –í–µ—Ä–Ω–æ?
# </b>''', reply_markup=get_callback_btns(btns={'‚úÖ–î–∞': 'yes',
#                                               '‚ùå–ù–µ—Ç': 'no'}, sizes=(2,)))
#     await state.set_state(PerevodFSM.confirmation)
#
#
# @user_private_router.callback_query(PerevodFSM.confirmation)
# async def search_sms_service(call: types.CallbackQuery, state: FSMContext, session: AsyncSession):
#     try:
#         if call.data == 'yes':
#             state_data = await state.get_data()
#             sender_user_id = state_data['sender_user_id']
#             geter_user_id = state_data['geter_user_id']
#             amount = state_data['amount']
#
#             sender = await orm_get_user(session=session, user_id=sender_user_id)
#             if sender.balance < amount:
#                 await state.clear()
#                 await call.message.answer(text="–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu_markup)
#
#             sender.balance -= amount
#             await orm_add_user(session=session, user=sender)
#             geter = await orm_get_user(session=session, user_id=geter_user_id)
#             geter.balance += amount
#             await orm_add_user(session=session, user=geter)
#             await state.clear()
#             await call.message.answer(text="üíõ–ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω", reply_markup=menu_markup)
#             await call.bot.send_message(chat_id=geter.user_id,
#                                         text=f'üíµ–í–∞–º –ø—Ä–∏—à–µ–ª –ø–µ—Ä–µ–≤–æ–¥ {amount}—Ä—É–±. –æ—Ç @{sender.username}')
#
#         else:
#             await state.clear()
#             await call.message.answer(text="–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu_markup)
#     except:
#         await state.clear()
#         await call.message.answer(text="–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω", reply_markup=menu_markup)
#
#
# @user_private_router.callback_query(F.data)
# async def else_cbck(callback: types.CallbackQuery, session: AsyncSession):
#     print(callback.data)
